CreateMethodProperty(String.prototype,"replaceAll",function e(r,t){"use strict";var i=RequireObjectCoercible(this);if(void 0!==r&&null!==r){if(IsRegExp(r)){var o=Get(r,"flags");if(!("flags"in RegExp.prototype||!0===r.global))throw TypeError("");if("flags"in RegExp.prototype&&(RequireObjectCoercible(o),-1===ToString(o).indexOf("g")))throw TypeError("")}var l="Symbol"in self&&"replace"in self.Symbol?GetMethod(r,self.Symbol.replace):void 0;if(void 0!==l)return Call(l,r,[i,t])}var n=ToString(i),a=ToString(r),g=IsCallable(t);!1===g&&(t=ToString(t));for(var f=a.length,s=Math.max(1,f),p=[],v=StringIndexOf(n,a,0);-1!==v;)p.push(v),v=StringIndexOf(n,a,v+s);for(var b=0,u="",S=0;S<p.length;S++){var d=n.substring(b,p[S]);if(g)var h=ToString(Call(t,void 0,[a,p[S],n]));else{var c=[];h=GetSubstitution(a,n,p[S],c,void 0,t)}u=u+d+h,b=p[S]+f}return b<n.length&&(u+=n.substring(b)),u});